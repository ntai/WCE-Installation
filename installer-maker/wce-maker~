#!/usr/bin/env python

import os, sys, subprocess, string, re, traceback, time

disk1_re = re.compile(r"Disk /dev/[^:]+:\s+\d+\.\d*\s+[KMG]B, (\d+) bytes")
disk2_re = re.compile(r"\d+ heads, \d+ sectors/track, \d+ cylinders, total (\d+) sectors")
disk3_re = re.compile(r"Units = sectors of \d+ * \d+ = (\d+) bytes")
part_re = re.compile(r"([^\s]+)\s+\*{0,1}\s+\d+\s+\d+\s+\d+\s+([\dA-Fa-f]+)\s+")


try:
    import dialog
except:
    print 'python-dialog package is not installed. Try'
    print '  sudo apt-get install ptyhon-dialog'
    sys.exit(1)
    pass


class partition:
    def __init__(self):
        self.device_name = None
        self.partition_type = None
        self.partition_number = None
        self.partition_name = None
        pass

    def mkfs(self, name):
        mkfs = None
        if self.partition_type == 'c':
            mkfs = subprocess.Popen(["mkfs.vfat", "-F", "32", "-n", name, self.device_name], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        elif self.partition_type == '83':
            mkfs = subprocess.Popen(["mkfs.ext2", "-b", "4096", "-L", name, self.device_name], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        else:
            pass
        if mkfs:
            (out, err) = mkfs.communicate()
            pass
        self.partition_name = name
        pass


    def unmount(self):
        unmount = subprocess.Popen(["/bin/umount", "-f", self.device_name], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        (out, err) = unmount.communicate()
        pass

    def get_mount_point(self):
        return "/media/%s" % self.partition_name
    
    def mount(self):
        mount_point = self.get_mount_point()
        if not os.path.exists(mount_point):
            os.mkdir(mount_point)
            pass
        subprocess.call(["/bin/mount", self.device_name, mount_point], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        pass

    pass


class disk:
    def __init__(self):
        self.device_name = None
        self.partitions = []
        self.disk_type = None
        self.size = None
        self.sectors = None
        self.uuid1 = None
        self.uuid2 = None
        self.mounted = False
        self.is_disk = None
        self.is_ata_or_scsi = None
        self.is_usb = None
        self.vendor = ""
        self.model_name = ""
        self.serial_no = ""
        pass


    def get_size(self):
        if self.size:
            return self.size

        fdisk = subprocess.Popen(["fdisk", "-l", "-u", self.device_name], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        (out, err) = fdisk.communicate()

        for line in out.split("\n"):
            if line == "":
                break
            m = disk1_re.match(line)
            if m:
                self.size = string.atoi(m.group(1))
                break
                pass
            pass
        return self.size


    def start_parted(self):
        size = self.get_size()
        sectors = size / 512

        part1_sectors = (750 * 1024 * 1024) / 512
        part1_start = 2048
        part1_end = part1_start + part1_sectors - 1
        part2_start = part1_start + part1_sectors
        part2_end = sectors - 1 

        args = ["parted", "-s", self.device_name, "unit", "s", "mklabel", "msdos", "mkpart", "primary", "fat32", "%d" % part1_start, "%d" % part1_end, "mkpart", "primary", "ext2", "%d" % part2_start, "%d" % part2_end, "set", "1", "boot", "on" ]
        return subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)


    def refresh_partition(self):
        global dlg
        # Disk to look at
        fdisk = subprocess.Popen(["fdisk", "-l", "-u", self.device_name], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        (out, err) = fdisk.communicate()
        if len(err) > 0:
            dlg.msgbox(err)
            return

        looking_for_partition = False
        self.partitions = []

        for line in out.split("\n"):
            if looking_for_partition:
                m = part_re.match(line)
                if m:
                    part = partition()
                    part.device_name = m.group(1)
                    part.partition_type = m.group(2)
                    self.partitions.append(part)
                    pass
                pass
            else:
                if line == "":
                    looking_for_partition = True
                    continue
                pass
            pass
        pass


    def unmount(self):
        for part in self.partitions:
            part.unmount()
            pass
        pass


    def mount(self):
        for part in self.partitions:
            part.mount()
            pass
        pass


    def find_partition(self, part_name):
        for part in self.partitions:
            if part.device_name == part_name:
                return part
            pass
        return None


    pass


#
def find_disk_device_files(devpath):
    result = []
    for letter in "abcdefghijklmnopqrstuvwxyz":
        device_file = devpath + letter
        if os.path.exists(device_file):
            result.append(device_file)
        else:
            break
        pass
    return result

# Get USB drives
def get_usb_disks():
    usb_disks = []

    # Gather up the possible disks
    possible_disks = find_disk_device_files("/dev/hd") + find_disk_device_files("/dev/sd")
    
    for disk_name in possible_disks:
        #
        # Now, I do double check that this is really a disk
        is_ata_or_scsi = False
        is_disk = False
        is_usb = False
        disk_model = None
        disk_serial = None
        disk_vendor = None

        try:
            udevadm = subprocess.Popen("udevadm info --query=property --name=%s" % disk_name, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
            (out, err) = udevadm.communicate()
            if len(err) > 0:
                print err
                pass
            is_ata_or_scsi = False
            is_disk = False
            for line in out.split("\n"):
                try:
                    elems = line.split('=')
                    tag = string.strip(elems[0])
                    value = string.strip(elems[1])
                    if tag == "ID_BUS":
                        if value.lower() == "ata" or value.lower() == "scsi":
                            is_ata_or_scsi = True
                            pass
                        elif value.lower() == "usb":
                            is_usb = True
                            pass
                        pass
                    elif tag == "ID_TYPE":
                        if value.lower() == "disk":
                            is_disk = True
                            pass
                        pass
                    elif tag == "ID_MODEL":
                        disk_model = value
                        pass
                    elif tag == "ID_VENDOR":
                        disk_vendor = vendor
                        pass
                    elif tag == "ID_SERIAL":
                        disk_serial = value
                        pass
                    pass
                except Exception, e:
                    traceback.print_tb(None)
                    pass
                pass
            pass
        except Exception, e:
            traceback.print_tb(None)
            pass

        if not is_disk:
            print "Passed on %s" % disk_name
            continue

        # Disk to look at
        current_disk = None
        fdisk = subprocess.Popen(["fdisk", "-l", "-u", disk_name], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        (out, err) = fdisk.communicate()

        looking_for_partition = False

        for line in out.split("\n"):
            if looking_for_partition and current_disk:
                m = part_re.match(line)
                if m:
                    if current_disk:
                        part = partition()
                        part.device_name = m.group(1)
                        part.partition_type = m.group(2)
                        current_disk.partitions.append(part)
                        pass
                    pass
                pass
            else:
                if line == "":
                    looking_for_partition = True
                    continue
                m = disk1_re.match(line)
                if m:
                    current_disk = disk()
                    current_disk.device_name = disk_name
                    current_disk.size = string.atoi(m.group(1))
                    pass
                pass
            pass

        if current_disk:
            current_disk.is_ata_or_scsi = is_ata_or_scsi
            current_disk.is_usb = is_usb
            current_disk.is_disk = is_disk
            current_disk.model_name = disk_model
            current_disk.serial_no = disk_serial

            if is_usb:
                current_disk.get_size()
                usb_disks.append(current_disk)
                pass
            pass
        else:
            print "Did not find the disk %s" % disk_name
            pass
        pass

    return usb_disks


def main(iso_file):
    global dlg

    usb_disks = get_usb_disks()
    if len(usb_disks) == 0:
        dlg.msgbox("Did not find any USB disks.")
        return
    
    menu = []
    for disk in usb_disks:
        menu.append((disk.device_name, "%s %dMB" % (disk.model_name, disk.get_size()/1000000), 0))
        pass
    (code, tag) = dlg.checklist(text="Which USB storage to initialize?",
                                height=15, width=70, list_height=8, 
                                choices = menu, title="USB Disk Maker", 
                                backtitle="World Computer Exchange")

    # code == 1: cancel
    if code == 1 or len(tag) == 0:
        return

    for disk in usb_disks:
        if not (disk.device_name in tag):
            continue
        #
        disk.unmount()
        #
        parted = disk.start_parted()
        (out, err) = parted.communicate()
        if len(err) > 0:
            dlg.msgbox("parted error\n" + err)
            continue

        disk.refresh_partition()
        disk.unmount()
        boot_part = None
        ext2_part = None
        for part in disk.partitions:
            dlg.infobox( "Formatting %s" % part.device_name)
            if part.partition_type == 'c':
                boot_part = part
                part.mkfs("ubuntu")
            elif part.partition_type == '83':
                ext2_part = part
                part.mkfs("casper-rw")
                pass
            pass
        dlg.infobox( "Formatting complete")
        pass

    disk.mount()

    iso_mount_point = "/mnt/my_iso.%d" % os.getpid()
    mount_iso_file(iso_file, iso_mount_point)
    

    dlg.gauge_start("Copying: 0%", title="Copying the boot files...")
    os.chdir(iso_mount_point)
    cp = subprocess.Popen("cp -rf COPYING Clonezilla-Live-Version live utils %s" % boot_part.get_mount_point(),
                          shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (out, err) = cp.communicate()
    
    cp = subprocess.Popen("cp -rf isolinux /%s/syslinux" % boot_part.get_mount_point(),
                          shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (out, err) = cp.communicate()

    pass


if __name__ == "__main__":
    global dlg, iso_file
    dlg = dialog.Dialog()
    iso_file = None

    if os.getuid() != 0:
        dlg.msgbox("You need to be root to make a USB stick.")
        sys.exit(1)
        pass

    if len(sys.argv) > 1:
        iso_file = sys.argv[1]
        pass
    else:
        (code, iso_file) = dlg.fselect(os.getcwd(), 20, 76)
        if code != 0:
            dlg.infobox("No ISO selected.")
            sys.exit(0)
            pass
        pass

    if not os.path.exists(iso_file):
        dlg.infobox("ISO file %s does not exist." % iso_file)
        sys.exit(0)
        pass

    main(iso_file)
    pass
